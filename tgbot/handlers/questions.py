from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import database.requests as rq
import keyboards.questions as kb


router = Router()


# /question handler
@router.message(Command("questions"))
async def cmd_help(message: Message):
    await message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏?", reply_markup=kb.questions_menu
    )


# class with fsm states
class CreateQuestion(StatesGroup):
    question = State()
    answer = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (from start) –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@router.callback_query(F.data == "create_question")
async def process_create_poll_clb(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã –Ω–∞—á–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞")  # alert
    await callback.message.answer("–í—ã –Ω–∞—á–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞!")  # message in chat

    # await state.set_state(CreateQuestion.name)  # goes to state
    # await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:")

    await state.set_state(CreateQuestion.question)  # goes to state
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")


@router.message(CreateQuestion.question)
async def process_question(message: Message, state: FSMContext):
    await state.update_data(question=message.text)
    await state.set_state(CreateQuestion.answer)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–π –≤–∞–º–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å (–¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–ø—Ä–æ—Å–∞).:"
    )


@router.message(CreateQuestion.answer)
async def process_answer(message: Message, state: FSMContext):
    await state.update_data(answer=message.text)
    data = await state.get_data()  # get all data about polls from user
    await message.answer(
        # f"–í—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ?\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞: {data['name']}\n–í–æ–ø—Ä–æ—Å: {data['question']}\n–û—Ç–≤–µ—Ç: {data['answer']}",
        f"–í—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ?\n\n–í–æ–ø—Ä–æ—Å: {data['question']}\n–û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç: {data['answer']}",
        reply_markup=kb.check_menu,  # buttons for check
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (from answer) –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@router.callback_query(F.data == "check_false")
async def process_check_false(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –≤–µ—Ä–Ω—ã.")
    await callback.answer("–°–Ω–∞—á–∞–ª–∞")  # alert
    await callback.message.answer(
        "–í—ã –Ω–∞—á–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å–Ω–∞—á–∞–ª–∞!"
    )  # message in chat

    # await state.set_state(CreateQuestion.name)  # goes to state
    # await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:")
    await state.set_state(CreateQuestion.question)  # goes to state
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (from answer) –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@router.callback_query(F.data == "check_true")
async def process_check_true(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–£—Å–ø–µ—à–Ω–æ")  # alert
    await callback.message.edit_text("–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã.")
    data = await state.get_data()

    creator_tg_id = callback.from_user.id
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        question_id = await rq.set_question(
            question=data["question"],
            answer=data["answer"],
            creator_tg_id=creator_tg_id,
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        await callback.message.answer(f"–î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await callback.message.answer(
            f"–í–æ–ø—Ä–æ—Å '{data['question']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.",
            reply_markup=kb.questions_list,
        )

    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")

    await state.clear()


@router.callback_query(F.data == "questions_list")
async def show_poll_list_clb(callback: CallbackQuery):
    callback.answer("–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.")
    user_id = callback.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    questions = await rq.get_questions(user_id)

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    if not questions:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")

    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
        response = "–í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        for question_id, poll_question, poll_answer in questions:
            response += (
                f"üìù –í–æ–ø—Ä–æ—Å #{question_id}: {poll_question}\n\t–û—Ç–≤–µ—Ç: {poll_answer}\n\n"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        await callback.message.answer(response, reply_markup=kb.create_poll)
